# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QPixmap, QMouseEvent, QPalette
from pathlib import Path
import nibabel as nib
from PyQt5.QtWidgets import QFileDialog
from Edit import on_mousePressEvent
from MSCAM import MSCAM     #添加提取方法

# 定义全局变量，用于记录NIFTI图像和掩模图像加载情况
global_a = False
global_b = False

def set_global_a(value):
    global global_a
    global_a = value
def set_global_b(value):
    global global_b
    global_b = value

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        # 读取QSS文件中的内容
        with open('style.qss', 'r') as f:
            qss = f.read()

        Dialog.setObjectName("Dialog")

        Dialog.resize(800, 600)

        # 标准取消确认键
        # self.buttonBox = QtWidgets.QDialogButtonBox(Dialog)
        # self.buttonBox.setStyleSheet(qss)
        # self.buttonBox.setGeometry(QtCore.QRect(240, 360, 341, 32))
        # self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        # self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        # self.buttonBox.setObjectName("buttonBox")

        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setStyleSheet(qss)
        self.pushButton.setGeometry(QtCore.QRect(60, 40, 120, 35))
        self.pushButton.setObjectName("pushButton")

        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setGeometry(QtCore.QRect(280, 30, 500, 500))
        self.groupBox.setObjectName("groupBox")

        self.widget = QtWidgets.QWidget(self.groupBox)
        self.widget.setObjectName("widget")
        self.widget.setStyleSheet("QWidget { border-color: transparent; border-width: 0px;}")

        self.horizontalSlider = QtWidgets.QSlider(Dialog)
        self.horizontalSlider.setStyleSheet(qss)
        self.horizontalSlider.setGeometry(QtCore.QRect(60, 206, 120, 16))
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")


        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setStyleSheet(qss)
        self.pushButton_2.setGeometry(QtCore.QRect(60, 90, 120, 35))
        self.pushButton_2.setObjectName("pushButton_2")

        #单选框分组
        self.buttonGroup1 = QButtonGroup()
        self.buttonGroup2 = QButtonGroup()

        self.radioButton = QtWidgets.QRadioButton(Dialog)
        #self.radioButton.setStyleSheet(qss)
        self.radioButton.setStyleSheet("QRadioButton#radioButton { color:rgb(255,255,255); }")
        self.radioButton.setGeometry(QtCore.QRect(60, 140, 97, 21))
        self.radioButton.setObjectName("radioButton")

        self.radioButton_2 = QtWidgets.QRadioButton(Dialog)
        #self.radioButton_2.setStyleSheet(qss)
        self.radioButton_2.setStyleSheet("QRadioButton#radioButton_2 { color:rgb(255,255,255); }")
        self.radioButton_2.setGeometry(QtCore.QRect(60, 170, 97, 21))
        self.radioButton_2.setObjectName("radioButton_2")

        self.radioButton_3 = QtWidgets.QRadioButton(Dialog)
        # self.radioButton_2.setStyleSheet(qss)
        self.radioButton_3.setStyleSheet("QRadioButton#radioButton_3 { color:rgb(255,255,255); }")
        self.radioButton_3.setChecked(True)
        self.radioButton_3.setGeometry(QtCore.QRect(60, 236, 97, 21))
        self.radioButton_3.setObjectName("radioButton_3")

        self.radioButton_4 = QtWidgets.QRadioButton(Dialog)
        self.radioButton_4.setStyleSheet("QRadioButton#radioButton_4 { color:rgb(255,255,255); }")
        self.radioButton_4.setGeometry(QtCore.QRect(60, 266, 97, 21))
        self.radioButton_4.setObjectName("radioButton_4")
        # 第一组
        self.buttonGroup1.addButton(self.radioButton)
        self.buttonGroup1.addButton(self.radioButton_2)
        # 第二组
        self.buttonGroup2.addButton(self.radioButton_3)
        self.buttonGroup2.addButton(self.radioButton_4)
        #分组完成-----------------------------------------

        self.retranslateUi(Dialog)
        # self.buttonBox.accepted.connect(Dialog.accept)
        # self.buttonBox.rejected.connect(Dialog.reject)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.pushButton.setText(_translate("Dialog", "上传待分割图像"))
        self.groupBox.setTitle(_translate("Dialog", ""))
        self.pushButton_2.setText(_translate("Dialog", "上传掩模图像"))
        self.radioButton.setText(_translate("Dialog", "待分割图像"))
        self.radioButton_2.setText(_translate("Dialog", "掩模图像"))
        self.radioButton_3.setText(_translate("Dialog", "指针"))
        self.radioButton_4.setText(_translate("Dialog", "画笔"))

    def Myui(self):
        self.pushButton.clicked.connect(self.bindButton)
        self.pushButton_2.clicked.connect(self.bindButton2)
        self.radioButton.clicked.connect(self.show_dialog_1)
        self.radioButton_2.clicked.connect(self.show_dialog_2)
        self.radioButton_3.clicked.connect(self.show_dialog_34)
        self.radioButton_4.clicked.connect(self.show_dialog_34)

    def showimage(self, slice_idx):  # 获取对应索引的图片，并将其绘制在figure画布上
        data_nii = nib.load(Path(self.nii_path))
        data1 = data_nii.get_fdata()  # 获取图像数据
        self.shape = data1.shape[-1]  # 图像切片数量
        self.horizontalSlider.setRange(1, data1.shape[-1])  # 滑块链接图像切片数量

        if not self.mask_path == '':
            data_mask = nib.load(Path(self.mask_path))
            data2 = data_mask.get_fdata()

        fig = self.F.figure
        fig.clear()
        ax = fig.add_subplot(111)  # 将画布划成1*1的大小并将图像放在1号位置
        ax.axis('off')  # 将子图的坐标轴关闭
        self.F.mousePressEvent = self.on_mousePressEvent
        ax.imshow(data1[:, :, slice_idx - 1], cmap='gray')  # 视图配色方案
        # 将mask的矩阵转换，未勾画区为透明的，勾画区为红色
        if self.check == 1:
            array1 = list(data2[:, :, slice_idx - 1])  # 从data2中获取数据，以列表的形式储存在array1中
            a = len(array1)
            b = len(array1[0])
            pic = [[0] * b for i in range(a)]
            for i in range(0, a):
                for j in range(0, b):
                    if array1[i][j] == 0:
                        pic[i][j] = [0, 0, 0, 0]
                    else:
                        pic[i][j] = [255, 0, 0, 100]

            ax.imshow(pic, cmap='viridis')
            del array1
            del pic
        fig.canvas.draw()

    def bindradiobutton(self):
        global slice_idx
        if self.radioButton.isChecked():
            self.check = 0
        else:
            self.check = 1
        slice_idx = self.horizontalSlider.value()
        self.showimage(slice_idx)

    def bindradiobutton_2(self):
        if self.radioButton_4.isChecked():
            self.draw = 1
        else:
            self.draw = 0

    def bindSlider(self):
        if global_a == False and global_b == False:
            QMessageBox.information(self, '提示', '请上传NIFTI格式图片', QMessageBox.Ok)
        else:
            slice_idx = self.horizontalSlider.value()
            self.showimage(slice_idx)

    def bindButton(self):
        file_name = QFileDialog.getOpenFileName(None, "Open File", "./", "nii(*.nii.gz;*.nii)")
        self.nii_path = file_name[0]
        if self.nii_path == '':
            QMessageBox.information(self, '提示', '请上传NIFTI格式图片', QMessageBox.Ok)
        else:
            slice_idx = self.horizontalSlider.value()
            self.showimage(slice_idx)
            self.radioButton.setChecked(True)
            set_global_a(True)
            self.horizontalSlider.valueChanged.connect(self.bindSlider)
            #用户按下上传图像按钮并上传正确格式图像，图像就会被MSCAM中的方法处理 TODO：需要图像处理则将下面这行注释取消
            #MSCAM(self.nii_path)


    def bindButton2(self):
        if self.nii_path == '':
            QMessageBox.information(self, '提示', '请先上传待分割图片', QMessageBox.Ok)
        else:
            global slice_idx
            file_name = QFileDialog.getOpenFileName(None, "Open File", "./", "nii(*.nii.gz;*.nii)")
            self.mask_path = file_name[0]
            if self.mask_path == '':
                QMessageBox.information(self, '提示', '请上传NIFTI格式图片', QMessageBox.Ok)
            else:
                #将mask图像显示在屏幕上
                self.radioButton_2.setChecked(True)
                self.check=1    #选中第二个单选框
                slice_idx = self.horizontalSlider.value()
                self.showimage(slice_idx)
                set_global_b(True)

    def show_dialog_1(self):
        if global_a == False:
            QMessageBox.information(self, '提示', '请上传NIFTI格式图片', QMessageBox.Ok)
        else:
            self.bindradiobutton()

    def show_dialog_2(self):
        if global_a == False:
            if global_b == False:
                QMessageBox.information(self, '提示', '请上传NIFTI格式图片', QMessageBox.Ok)
            else:
                self.bindradiobutton()
        if global_a == True:
            if global_b == False:
                QMessageBox.information(self, '提示', '掩模图像不存在', QMessageBox.Ok)
                self.radioButton.setChecked(True)
            else:
                self.bindradiobutton()

    def show_dialog_34(self):
        if global_a == False:
            if global_b == False:
                QMessageBox.information(self, '提示', '请上传NIFTI格式图片', QMessageBox.Ok)
                self.radioButton_3.setChecked(True)

        if global_a == True:
            if global_b == False:
                QMessageBox.information(self, '提示', '掩模图像不存在', QMessageBox.Ok)
                self.radioButton_3.setChecked(True)

        if global_a == True:
            if global_b == True:
                print('hello')
                self.bindradiobutton_2()
                value = self.horizontalSlider.value()
                #TODO   将连接mask图像方法写在这里，并在后面写一个用户画曲线的方法（要print曲线覆盖所有的像素点坐标，输出一下其中一些坐标的勾画值，看是否是连接到了data2)
                # 试图将鼠标点击动作与mask图像进行连接



    def on_mousePressEvent(self, event: QMouseEvent):
        # mask_data = nib.load(Path(self.mask_path)).get_fdata()
        # mask_data.mousePressEvent = self.on_mousePressEvent
        # 获取当前坐标
        pos = event.pos()
        x, y = pos.x(), pos.y()
        print(f"pos: {pos}")

        if self.mask_path != '':
            data_mask = nib.load(Path(self.mask_path))
            data2 = data_mask.get_fdata()
            # 计算相对坐标
            img_height, img_width, _ = data2.shape  #图片长宽
            # 计算像素缩放比率,除以360是因为图片在屏幕上显示的长宽像素为360
            scale_x = img_width / 360
            scale_y = img_height / 360
            if 0<=event.x()-60<=img_width and 0<=event.y()-60<=img_height:
                relative_x = int((event.x()-60)*scale_x)
                relative_y = int((event.y()-60)*scale_y)
                print(f"Relative point: x={relative_x},y={relative_y}")
                mask_value = data2[relative_y, relative_x, slice_idx]
                print(mask_value)